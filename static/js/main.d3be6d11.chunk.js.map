{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","formastri1","event","target","value","length","concat","test","console","log","onChangeCardHolder","e","name","toUpperCase","match","alert","setState","cardHolder","valueCardHolder","onChangeCardNumber","number","isNaN","first4","substring","second4","third4","fourth4","cardNumber","valueCardNumber","first4digit","second4digit","third4digit","fourth4digit","state","validThru","valueValidThru","className","src","alt","this","type","placeholder","onChange","maxLength","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d3be6d11.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      cardHolder:'Hosni Ghribi',\n      cardNumber:'.... .... .... ....',\n      validThru:'**/**',\n      valueCardHolder:'',\n      valueCardNumber:'',\n      valueValidThru:'',\n      first4digit:'****',\n      second4digit:'****',\n      third4digit:'****',\n      fourth4digit:'****'\n    }\n \n      /*let cardExpiry=event.target.value;\n      let mm=cardExpiry.substr(0,2)\n      if (/^[0-9]*$/.test(cardExpiry)) {\n        if (cardExpiry.substr(0, 2) <= 12){\n          this.setState({\n            validThru: cardExpiry.substr(0, 2) + \"/\" + cardExpiry.substr(2, 4),\n            valueValidThru:cardExpiry.substr(0, 2) + \"/\" + cardExpiry.substr(2, 4)\n          });\n        }\n      }\n*/\n\n     \n  \n      /*var patt1 = /[0-9]/g;\n      if (patt1.test(code)){\n\n\n        let x=code.substring(0,2)\n        console.log(\"x\"+x)\n\n       \n        this.setState({\n          validThru:code,\n          valueValidThru:code\n        })\n      }\n      else alert(\"Enter a valid month\")\n     /* var allowedKeys = [8];\n      if (allowedKeys.indexOf(code) !== -1) {\n        return;\n      }\n      event.target.value = event.target.value.replace(\n        /^([1-9]\\/|[2-9])$/g, '0$1/' // 3 > 03/\n      );\n      */\n  \n  }\n\n\n  formastri1=(event) =>{\n   \n    if (event.target.value.length===2)\n    event.target.value=event.target.value.concat(\"/\")\n    var patt1 = /[0-9]/g;\n      if (patt1.test(event.target.value)){\n// if test  2 d [1..12] this.setState({validThru:event.target.value})\n\n      \n      }\nconsole.log( \"fff\")\n\n\n\n    \n  }\n  onChangeCardHolder=(e)=>{\n    let name=e.target.value.toUpperCase()\n    let regex=/^[a-z A-Z]+$/\n    if (!name.match(regex)) \n  {\n    alert(\"cardHolder must contain only chars\");\n    return false;\n  }\n    if (name.length<21)\n    this.setState({\n      cardHolder:name,\n      valueCardHolder:e.target.value\n    }) \n    else alert (\"Card holder can not contain more than 20 char\")\n\n  }\nonChangeCardNumber=(e)=>{\nlet number=e.target.value\nif (isNaN(number)) \n  {\n    alert(\"cardNumber must contain only numbers\");\n    return false;\n  }\nif (number.length<17){\n    let first4=number.substring(0,4),\n    second4=number.substring(4,8),\n    third4=number.substring(8,12),\n    fourth4=number.substring(12)\n    this.setState({\n      cardNumber:number,\n      valueCardNumber:e.target.value,\n      first4digit:first4,\n      second4digit:second4,\n      third4digit:third4,\n      fourth4digit:fourth4\n    }) \n    \n  }\n    else alert (\"Card number can not contain more than 16 char\")\n\n}\n  render() { \n    return ( \n      <div className=\"App\">\n        <div className=\"main-container\">\n          <div className=\"title-container\">\n              <h1>Credit Card</h1>\n          </div>\n          <div className=\"chip-container\">\n              <img src=\"https://cdn.iconscout.com/icon/premium/png-512-thumb/credit-card-chip-1522262-1288452.png\" alt=\"\" />\n          </div>\n          <div className=\"footer\">\n            <div className=\"info-container\">\n              <div className=\"card-number\">\n                <p>{this.state.first4digit}</p><p>{this.state.second4digit}</p> <p>{this.state.third4digit}</p> <p>{this.state.fourth4digit}</p>\n              </div> \n              <div className=\"code-valid\">\n                <div className=\"card-code\">\n                  <p className=\"bold-effect\">5422</p>\n                </div>\n                <div className=\"card-validation\">\n                  <div className=\"month-year\">\n                      <p>Month/Year</p>\n                  </div>\n                  <div className=\"valid-thru\">\n                    <div className=\"valid-until\">\n                      <p>VALID<br/>THRU</p>\n                    </div>\n                    <div>\n                      <i className=\"fas fa-caret-right\"></i>\n                    </div>\n                    <div className=\"month-year-value\">\n                      <p className=\"bold-effect\">{this.state.validThru}</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"card-holder\">\n                <p className=\"bold-effect\">{this.state.cardHolder}</p>\n              </div> \n            </div>\n            <div className=\"imgs-conainer\">\n              <img src=\".\\imgs\\visa-master-card.png\" alt=\"\"/>\n            </div>\n          </div>\n        </div>\n        <div className=\"form-container\">\n          <input type=\"text\" placeholder=\"Card Number\" onChange={(e)=>this.onChangeCardNumber(e)} value={this.state.valueCardNumber}/><br/>\n          <input type=\"text\" placeholder=\"Card Holder\" onChange={(e)=>this.onChangeCardHolder(e)} value={this.state.valueCardHolder}/><br/>\n          <input maxLength=\"5\" placeholder=\"MM/YY\" type=\"text\" onChange={(event)=>this.formastri1(event)} />\n\n        </div>\n      </div>\n    );\n  }\n}\n \nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}